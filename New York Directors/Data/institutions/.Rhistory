MF <- triMF("MH", 0:8, c(4,5,6,1))
tko <- addMF(tko, "input", 1, MF)
MF <- triMF("H", 0:8, c(5,6,7,1))
tko <- addMF(tko, "input", 1, MF)
MF <- triMF("VH", 0:8, c(6,7,8,1))
tko <- addMF(tko, "input", 1, MF)
# Determine MFs for "Capability"
MF <- triMF("VL", 0:8, c(0,1,2,1))
tko <- addMF(tko, "input", 2, MF)
MF <- triMF("L", 0:8, c(1,2,3,1))
tko <- addMF(tko, "input", 2, MF)
MF <- triMF("ML", 0:8, c(2,3,4,1))
tko <- addMF(tko, "input", 2, MF)
MF <- triMF("M", 0:8, c(3,4,5,1))
tko <- addMF(tko, "input", 2, MF)
MF <- triMF("MH", 0:8, c(4,5,6,1))
tko <- addMF(tko, "input", 2, MF)
MF <- triMF("H", 0:8, c(5,6,7,1))
tko <- addMF(tko, "input", 2, MF)
MF <- triMF("VH", 0:8, c(6,7,8,1))
tko <- addMF(tko, "input", 2, MF)
# Determine MFs for "Effectiveness"
MF <- triMF("N", 0:5, c(0,1,2,1))
tko <- addMF(tko, "input", 3, MF)
MF <- triMF("NE", 0:5, c(1,2,3,1))
tko <- addMF(tko, "input", 3, MF)
MF <- triMF("SE", 0:5, c(2,3,4,1))
tko <- addMF(tko, "input", 3, MF)
MF <- triMF("E", 0:5, c(3,4,5,1))
tko <- addMF(tko, "input", 3, MF)
# Determine MFs for "Risk"
MF <- triMF("VL", 0:100, c(0,12.5,25,1))
tko <- addMF(tko, "output", 1, MF)
MF <- triMF("L", 0:100, c(12.5,25,37.5,1))
tko <- addMF(tko, "output", 1, MF)
MF <- triMF("ML", 0:100, c(25,37.5,50,1))
tko <- addMF(tko, "output", 1, MF)
MF <- triMF("M", 0:100, c(37.5,50,62.5,1))
tko <- addMF(tko, "output", 1, MF)
MF <- triMF("MH", 0:100, c(50,62.5,75,1))
tko <- addMF(tko, "output", 1, MF)
MF <- triMF("H", 0:100, c(62.5,75,87.5,1))
tko <- addMF(tko, "output", 1, MF)
MF <- triMF("VH", 0:100, c(75,87.5,100,1))
tko <- addMF(tko, "output", 1, MF)
# Add the rule set
# AND == 1
# OR == 2
tko <- addRule(tko, rbind(c(1, 1, 1, 1, 1, 1),
c(1, 2, 1, 1, 1, 1),
c(1, 3, 1, 1, 1, 1),
c(1, 4, 1, 1, 1, 1),
c(1, 5, 1, 1, 1, 1),
c(1, 6, 1, 1, 1, 1),
c(1, 7, 1, 1, 1, 1),
c(2, 1, 1, 1, 1, 1),
c(2, 2, 1, 1, 1, 1),
c(2, 3, 1, 1, 1, 1),
c(2, 4, 1, 1, 1, 1),
c(2, 5, 1, 2, 1, 1),
c(2, 6, 1, 2, 1, 1),
c(2, 7, 1, 2, 1, 1),
c(3, 1, 1, 1, 1, 1),
c(3, 2, 1, 1, 1, 1),
c(3, 3, 1, 1, 1, 1),
c(3, 4, 1, 1, 1, 1),
c(3, 5, 1, 2, 1, 1),
c(3, 6, 1, 2, 1, 1),
c(3, 7, 1, 2, 1, 1),
c(4, 1, 1, 1, 1, 1),
c(4, 2, 1, 1, 1, 1),
c(4, 3, 1, 1, 1, 1),
c(4, 4, 1, 1, 1, 1),
c(4, 5, 1, 2, 1, 1),
c(4, 6, 1, 2, 1, 1),
c(4, 7, 1, 2, 1, 1),
c(5, 1, 1, 1, 1, 1),
c(5, 2, 1, 1, 1, 1),
c(5, 3, 1, 1, 1, 1),
c(5, 4, 1, 2, 1, 1),
c(5, 5, 1, 2, 1, 1),
c(5, 6, 1, 2, 1, 1),
c(5, 7, 1, 3, 1, 1),
c(6, 1, 1, 1, 1, 1),
c(6, 2, 1, 1, 1, 1),
c(6, 3, 1, 2, 1, 1),
c(6, 4, 1, 2, 1, 1),
c(6, 5, 1, 2, 1, 1),
c(6, 6, 1, 3, 1, 1),
c(6, 7, 1, 3, 1, 1),
c(7, 1, 1, 1, 1, 1),
c(7, 2, 1, 2, 1, 1),
c(7, 3, 1, 2, 1, 1),
c(7, 4, 1, 2, 1, 1),
c(7, 5, 1, 3, 1, 1),
c(7, 6, 1, 3, 1, 1),
c(7, 7, 1, 3, 1, 1),
c(2, 1, 2, 2, 1, 1),
c(2, 2, 2, 2, 1, 1),
c(2, 3, 2, 2, 1, 1),
c(2, 4, 2, 2, 1, 1),
c(2, 5, 2, 3, 1, 1),
c(2, 6, 2, 3, 1, 1),
c(2, 7, 2, 4, 1, 1),
c(3, 1, 2, 2, 1, 1),
c(3, 2, 2, 2, 1, 1),
c(3, 3, 2, 2, 1, 1),
c(3, 4, 2, 3, 1, 1),
c(3, 5, 2, 3, 1, 1),
c(3, 6, 2, 3, 1, 1),
c(3, 7, 2, 4, 1, 1),
c(4, 1, 2, 2, 1, 1),
c(4, 2, 2, 3, 1, 1),
c(4, 3, 2, 3, 1, 1),
c(4, 4, 2, 3, 1, 1),
c(4, 5, 2, 3, 1, 1),
c(4, 6, 2, 3, 1, 1),
c(4, 7, 2, 5, 1, 1),
c(5, 1, 2, 2, 1, 1),
c(5, 2, 2, 3, 1, 1),
c(5, 3, 2, 3, 1, 1),
c(5, 4, 2, 3, 1, 1),
c(5, 5, 2, 4, 1, 1),
c(5, 6, 2, 4, 1, 1),
c(5, 7, 2, 4, 1, 1),
c(6, 1, 2, 3, 1, 1),
c(6, 2, 2, 3, 1, 1),
c(6, 3, 2, 3, 1, 1),
c(6, 4, 2, 4, 1, 1),
c(6, 5, 2, 4, 1, 1),
c(6, 6, 2, 4, 1, 1),
c(6, 7, 2, 5, 1, 1),
c(7, 1, 2, 3, 1, 1),
c(7, 2, 2, 3, 1, 1),
c(7, 3, 2, 4, 1, 1),
c(7, 4, 2, 5, 1, 1),
c(7, 5, 2, 5, 1, 1),
c(7, 6, 2, 6, 1, 1),
c(7, 7, 2, 6, 1, 1),
c(3, 1, 3, 3, 1, 1),
c(3, 2, 3, 3, 1, 1),
c(3, 3, 3, 4, 1, 1),
c(3, 4, 3, 4, 1, 1),
c(3, 5, 3, 5, 1, 1),
c(3, 6, 3, 5, 1, 1),
c(3, 7, 3, 5, 1, 1),
c(4, 1, 3, 3, 1, 1),
c(4, 2, 3, 3, 1, 1),
c(4, 3, 3, 3, 1, 1),
c(4, 4, 3, 4, 1, 1),
c(4, 5, 3, 4, 1, 1),
c(4, 6, 3, 5, 1, 1),
c(4, 7, 3, 5, 1, 1),
c(5, 1, 3, 3, 1, 1),
c(5, 2, 3, 3, 1, 1),
c(5, 3, 3, 4, 1, 1),
c(5, 4, 3, 4, 1, 1),
c(5, 5, 3, 5, 1, 1),
c(5, 6, 3, 5, 1, 1),
c(5, 7, 3, 5, 1, 1),
c(6, 1, 3, 3, 1, 1),
c(6, 2, 3, 3, 1, 1),
c(6, 3, 3, 3, 1, 1),
c(6, 4, 3, 4, 1, 1),
c(6, 5, 3, 5, 1, 1),
c(6, 6, 3, 5, 1, 1),
c(6, 7, 3, 5, 1, 1),
c(7, 1, 3, 4, 1, 1),
c(7, 2, 3, 4, 1, 1),
c(7, 3, 3, 4, 1, 1),
c(7, 4, 3, 5, 1, 1),
c(7, 5, 3, 5, 1, 1),
c(7, 6, 3, 5, 1, 1),
c(7, 7, 3, 5, 1, 1),
c(4, 1, 4, 5, 1, 1),
c(4, 2, 4, 5, 1, 1),
c(4, 3, 4, 5, 1, 1),
c(4, 4, 4, 5, 1, 1),
c(4, 5, 4, 6, 1, 1),
c(4, 6, 4, 6, 1, 1),
c(4, 7, 4, 6, 1, 1),
c(5, 1, 4, 5, 1, 1),
c(5, 2, 4, 5, 1, 1),
c(5, 3, 4, 6, 1, 1),
c(5, 4, 4, 6, 1, 1),
c(5, 5, 4, 6, 1, 1),
c(5, 6, 4, 6, 1, 1),
c(5, 7, 4, 7, 1, 1),
c(6, 1, 4, 6, 1, 1),
c(6, 2, 4, 6, 1, 1),
c(6, 3, 4, 6, 1, 1),
c(6, 4, 4, 6, 1, 1),
c(6, 5, 4, 6, 1, 1),
c(6, 6, 4, 7, 1, 1),
c(6, 7, 4, 7, 1, 1),
c(7, 1, 4, 6, 1, 1),
c(7, 2, 4, 6, 1, 1),
c(7, 3, 4, 6, 1, 1),
c(7, 4, 4, 6, 1, 1),
c(7, 5, 4, 7, 1, 1),
c(7, 6, 4, 7, 1, 1),
c(7, 7, 4, 7, 1, 1)))
load("/Users/owen/Dropbox/Cyberlytic/Training data/Forensics/Tessella/Data/tessellaData2.Rdata")
load("/Users/owen/Dropbox/Cyberlytic/Training data/Forensics/Tessella/Data/tessellaRisk.Rdata")
View(tessellaData)
table(tessellaData$fullFingerprint)
summaryFullFingerprint <- as.data.frame(table(tessellaData$fullFingerprint))
View(summaryFullFingerprint)
View(tessellaRisk)
summaryFullFingerprint <- tessellaRisk[!duplicated(tessellaRisk$fullFingerprint), ]
View(summaryFullFingerprint)
sum(tessellaRisk$fullFingerprint==summaryFullFingerprint[1])
sum(tessellaRisk$fullFingerprint==summaryFullFingerprint[2])
sum(tessellaRisk$fullFingerprint==summaryFullFingerprint[3])
summaryFullFingerprint
summaryFullFingerprint <- tessellaRisk[!duplicated(tessellaRisk$fullFingerprint), ]
summaryFullFingerprint
sum(tessellaRisk$fullFingerprint==summaryFullFingerprint[3,])
sum(tessellaRisk$fullFingerprint==summaryFullFingerprint$fullFingerprint[1])
sum(tessellaRisk$fullFingerprint==summaryFullFingerprint$fullFingerprint[2])
summaryFullFingerprint$freq <- 0
for (i in 1:nrow(summaryFullFingerprint)) {
tessellaRisk$freq[i] <- sum(tessellaRisk$fullFingerprint==summaryFullFingerprint$fullFingerprint[i])
}
View(summaryFullFingerprint)
for (i in 1:nrow(summaryFullFingerprint)) {
summaryFullFingerprint$freq[i] <- sum(tessellaRisk$fullFingerprint==summaryFullFingerprint$fullFingerprint[i])
}
View(summaryFullFingerprint)
tessellaRisk$freq <- NULL
install.packages("mailR")
library(mailR)
send.mail(from = "sims.owen@gmail.com",
to = c("sims.owen@gmail.com"),
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
ssl=TRUE, user.name = "sims.owen@gmail.com",
passwd = "breakrecords1"),
authenticate = TRUE,
send = TRUE)
send.mail(from = "sims.owen@gmail.com",
to = c("sims.owen@gmail.com"),
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
ssl=TRUE, user.name = "sims.owen@gmail.com",
passwd = "breakrecords1"),
authenticate = TRUE,
send = TRUE)
send.mail(from = "cyberlytic.messenger@gmail.com",
to = c("sims.owen@gmail.com"),
subject = "We have just recorded a Very High alert!",
body = "Hi Owen,\n You better go check out your CTP!",
smtp = list(host.name = "smtp.gmail.com", port = 465,
ssl=TRUE, user.name = "cyberlytic.messenger@gmail.com",
passwd = "Inmyhead1"),
authenticate = TRUE,
send = TRUE)
send.mail(from = "cyberlytic.messenger@gmail.com",
to = c("sims.owen@gmail.com"),
subject = "We have just recorded a Very High alert!",
body = "Hi Owen,\n \nYou better go check out your CTP!\n \nStay safe,\n \nThe Cyberlytic Team",
smtp = list(host.name = "smtp.gmail.com", port = 465,
ssl=TRUE, user.name = "cyberlytic.messenger@gmail.com",
passwd = "Inmyhead1"),
authenticate = TRUE,
send = TRUE)
send.mail(from = "cyberlytic.messenger@gmail.com",
to = c("sims.owen@gmail.com"),
subject = "We have just recorded a Very High alert!",
body = "Hi Owen,\n \nWe have just recorded a Very High alert!\n \nYou better go check out your CTP!\n \nStay safe,\n \nThe Cyberlytic Team",
smtp = list(host.name = "smtp.gmail.com", port = 465,
ssl=TRUE, user.name = "cyberlytic.messenger@gmail.com",
passwd = "Inmyhead1"),
authenticate = TRUE,
send = TRUE)
rm(list = ls())
setwd("~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families")
if(!require(networkD3)) {
install.packages("networkD3")
library(networkD3)
} else {
library(networkD3)
}
# Load up and clean up the `Node List` and `Edge List` for the network
nodeList <- read.csv(file = "Florentine families.csv", header = TRUE, sep = ",")
nodeList$Lat <- nodeList$lat10 <- nodeList$Long <- nodeList$long10 <- NULL
nodeList$Gross.Wealth <- nodeList$Gross.Wealth/10000
colnames(nodeList) <- c("id", "name", "faction", "wealth", "brokerage")
edgeList <- read.csv(file = "Marriage links.csv", header = TRUE, sep = ",")
colnames(edgeList) <- c("source", "target", "weight")
# Rebase node IDs for analysis
nodeList$newID <- data.frame(seq(1:nrow(nodeList)) - 1)
colnames(nodeList[, ncol(nodeList)]) <- "newID"
for (i in 1:nrow(nodeList)) {
for (j in 1:nrow(edgeList)) {
if (nodeList$id[i] == edgeList$source[j]) {
edgeList$source[j] <- nodeList$newID[i]
}
if (nodeList$id[i] == edgeList$target[j]) {
edgeList$target[j] <- nodeList$newID[i]
}
}
}
# Generate the Florentine marriage network
MarriageNetwork <- forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = FALSE, fontFamily = "Helvetica", opacityNoHover = TRUE,
linkColour = "#666", linkDistance = 250, Nodesize = "wealth", opacity = 0.9, zoom = TRUE)
MarriageNetwork
# Set up the libraries and all that jazz
rm(list = ls())
setwd("~/Dropbox/Projects/R Network Tutorials/Examples/New York Directors/institutions")
if(!require(networkD3)) {
install.packages("networkD3")
library(networkD3)
} else {
library(networkD3)
}
# Load up and clean up the Node List and Edge List for the network
nodeList <- read.csv(file = "Institution Node List.csv", header = TRUE, sep = ",")
nodeList$value100 <- nodeList$Value/1000000
colnames(nodeList) <- c("id", "name", "group", "value", "value100")
nodeList$group <- nodeList$group - 1
edgeList <- read.csv(file = "Institution Edge List.csv", header = TRUE, sep = ",")
colnames(edgeList) <- c("source", "target", "type", "id", "label", "weight")
edgeList$label <- edgeList$type <- edgeList$id <- NULL
# Remove all nodes (institutions) that have no interlock
for (i in nrow(nodeList):1) {
if ((is.na(match(nodeList$id[i], edgeList$source))) & (is.na(match(nodeList$id[i], edgeList$target)))) {
nodeList <- nodeList[-c(i),]
}
}
# Rebase node IDs for analysis
nodeList$newID <- data.frame(seq(1:nrow(nodeList)) - 1)
colnames(nodeList[, ncol(nodeList)]) <- "newID"
for (i in 1:nrow(nodeList)) {
for (j in 1:nrow(edgeList)) {
if (nodeList$id[i] == edgeList$source[j]) {
edgeList$source[j] <- nodeList$newID[i]
}
if (nodeList$id[i] == edgeList$target[j]) {
edgeList$target[j] <- nodeList$newID[i]
}
}
}
# Generate the network
NYinstitutions <- forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "group", Nodesize = "value100", colourScale = JS("d3.scale.category10()"),
fontSize = 12, fontFamily = "sans",
linkDistance = 200, opacity = 0.85, zoom = TRUE)
NYinstitutions
# Set up the libraries and all that jazz
rm(list = ls())
setwd("~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families")
if(!require(networkD3)) {
install.packages("networkD3")
library(networkD3)
} else {
library(networkD3)
}
# Load up and clean up the `Node List` and `Edge List` for the network
nodeList <- read.csv(file = "Florentine families.csv", header = TRUE, sep = ",")
nodeList$Lat <- nodeList$lat10 <- nodeList$Long <- nodeList$long10 <- NULL
nodeList$Gross.Wealth <- nodeList$Gross.Wealth/10000
colnames(nodeList) <- c("id", "name", "faction", "wealth", "brokerage")
edgeList <- read.csv(file = "Marriage links.csv", header = TRUE, sep = ",")
colnames(edgeList) <- c("source", "target", "weight")
# Rebase node IDs for analysis
nodeList$newID <- data.frame(seq(1:nrow(nodeList)) - 1)
colnames(nodeList[, ncol(nodeList)]) <- "newID"
for (i in 1:nrow(nodeList)) {
for (j in 1:nrow(edgeList)) {
if (nodeList$id[i] == edgeList$source[j]) {
edgeList$source[j] <- nodeList$newID[i]
}
if (nodeList$id[i] == edgeList$target[j]) {
edgeList$target[j] <- nodeList$newID[i]
}
}
}
# Generate the Florentine marriage network
MarriageNetwork <- forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = FALSE, fontFamily = "Helvetica", opacityNoHover = TRUE,
linkColour = "#666", linkDistance = 250, Nodesize = "wealth", opacity = 0.9, zoom = TRUE)
MarriageNetwork
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = FALSE, fontFamily = "Helvetica", opacityNoHover = TRUE,
linkColour = "#444", linkDistance = 250, Nodesize = "wealth", opacity = 0.9, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = FALSE, fontFamily = "Helvetica", opacityNoHover = TRUE,
linkColour = "#888", linkDistance = 250, Nodesize = "wealth", opacity = 0.9, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = FALSE, fontFamily = "Helvetica", opacityNoHover = TRUE,
linkColour = "#888", linkDistance = 250, Nodesize = "wealth", opacity = 1, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = FALSE, fontFamily = "Helvetica", opacityNoHover = TRUE, height = 600, width = 400,
linkColour = "#888", linkDistance = 250, Nodesize = "wealth", opacity = 0.9, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = FALSE, fontFamily = "Helvetica", opacityNoHover = TRUE, height = 600, width = 600,
linkColour = "#888", linkDistance = 250, Nodesize = "wealth", opacity = 0.9, zoom = TRUE)
install.packages("prettyR")
library(prettyR
)
?prettyR
htmlize("~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families/R code/Marriage network.R")
htmlize("~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families/R code/Marriage network.R")
source('~/Dropbox/Projects/R Network Tutorials/Examples/New York Directors/R code/NetworkInstitutions.R')
htmlize("~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families/R code/Marriage network.R")
htmlize("~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families/R code/Marriage network.R")
source('~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families/R code/Marriage network.R')
source('~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families/R code/Marriage network.R')
htmlize("~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families/R code/Marriage network.R")
html <- htmlize("~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families/R code/Marriage network.R")
htmlize("~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families/R code/Marriage network.R")
system(paste(options("browser")," file:",getwd(),"/Marriage network.html",sep="",collapse=""))
system(paste(options("browser")," file:",getwd(),"/test.html",sep="",collapse=""))
R2html("~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families/R code/Marriage network.R", "~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families/R code/Marriage network.html")
install.packages("networkD3")
htmlize("~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families/R code/Marriage network.R", "~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families/R code/Marriage network.html")
library(prettyR)
htmlize("~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families/R code/Marriage network.R", "~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families/R code/Marriage network.html")
htmlize("~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families/R code/Marriage network.R", bgcolor="#dddddd",echo=FALSE,do.nav=FALSE,useCSS=NULL)
getwd()
# Set up the libraries and all that jazz
rm(list = ls())
if(!require(networkD3)) {
install.packages("networkD3")
library(networkD3)
} else {
library(networkD3)
}
# Load up `Node List` and `Edge List` for the network
nodeList <- read.csv(file = "~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families/Florentine families.csv", header = TRUE, sep = ",")
edgeList <- read.csv(file = "~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families/Marriage links.csv", header = TRUE, sep = ",")
# Clean up the `Node List` and `Edge List` for networkD3
nodeList$Lat <- nodeList$lat10 <- nodeList$Long <- nodeList$long10 <- NULL
nodeList$Gross.Wealth <- nodeList$Gross.Wealth/10000
colnames(nodeList) <- c("id", "name", "faction", "wealth", "brokerage")
colnames(edgeList) <- c("source", "target", "weight")
# Rebase node IDs for analysis
nodeList$newID <- data.frame(seq(1:nrow(nodeList)) - 1)
colnames(nodeList[, ncol(nodeList)]) <- "newID"
for (i in 1:nrow(nodeList)) {
for (j in 1:nrow(edgeList)) {
if (nodeList$id[i] == edgeList$source[j]) {
edgeList$source[j] <- nodeList$newID[i]
}
if (nodeList$id[i] == edgeList$target[j]) {
edgeList$target[j] <- nodeList$newID[i]
}
}
}
# Generate the Florentine marriage network
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = FALSE, fontFamily = "Helvetica", opacityNoHover = TRUE, height = 600, width = 600,
linkColour = "#888", linkDistance = 250, Nodesize = "wealth", opacity = 0.9, zoom = TRUE)
nodeList2 <- read.csv(file = "http://owensims.co.uk/projects/FlorentineFamilies/Florentine families.csv", header = TRUE, sep = ",")
nodeList2 <- read.csv(file = "http://owensims.co.uk/projects/FlorentineFamilies/FlorentineFamilies.csv", header = TRUE, sep = ",")
View(nodeList2)
# Set up the libraries and all that jazz
rm(list = ls())
if(!require(networkD3)) {
install.packages("networkD3")
library(networkD3)
} else {
library(networkD3)
}
# Load up `Node List` and `Edge List` for the network
nodeList <- read.csv(file = "http://owensims.co.uk/projects/FlorentineFamilies/FlorentineFamilies.csv", header = TRUE, sep = ",")
edgeList <- read.csv(file = "http://owensims.co.uk/projects/FlorentineFamilies/MarriageLinks.csv", header = TRUE, sep = ",")
# Clean up the `Node List` and `Edge List` for networkD3
nodeList$Lat <- nodeList$lat10 <- nodeList$Long <- nodeList$long10 <- NULL
nodeList$Gross.Wealth <- nodeList$Gross.Wealth/10000
colnames(nodeList) <- c("id", "name", "faction", "wealth", "brokerage")
colnames(edgeList) <- c("source", "target", "weight")
# Rebase node IDs for analysis
nodeList$newID <- data.frame(seq(1:nrow(nodeList)) - 1)
colnames(nodeList[, ncol(nodeList)]) <- "newID"
for (i in 1:nrow(nodeList)) {
for (j in 1:nrow(edgeList)) {
if (nodeList$id[i] == edgeList$source[j]) {
edgeList$source[j] <- nodeList$newID[i]
}
if (nodeList$id[i] == edgeList$target[j]) {
edgeList$target[j] <- nodeList$newID[i]
}
}
}
# Generate the Florentine marriage network
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = FALSE, fontFamily = "Helvetica", opacityNoHover = TRUE, height = 600,
width = 600, linkColour = "#888", linkDistance = 250, Nodesize = "wealth", opacity = 0.9, zoom = TRUE)
