Target = "target", Value = "weight", NodeID = "name",
Group = "group", Nodesize = "value100", opacity = 0.85, zoom = TRUE)
rm(list=ls())
library(networkD3)
setwd("~/Desktop/New York Directors/institutions")
nodeList <- read.csv(file = "Institution Node List.csv", header = TRUE, sep = ",")
nodeList$value100 <- nodeList$value/1000000
colnames(nodeList) <- c("id", "name", "group", "value", "value100")
nodeList$group <- nodeList$group - 1
edgeList <- read.csv(file = "Institution Edge List.csv", header = TRUE, sep = ",")
colnames(edgeList) <- c("source", "target", "type", "id", "label", "weight")
edgeList$label <- edgeList$type <- edgeList$id <- NULL
# Remove all nodes (institutions) that have no connection to any other node
# Remove all singletons
for (i in nrow(nodeList):1) {
if ((is.na(match(nodeList$id[i], edgeList$source))) & (is.na(match(nodeList$id[i], edgeList$target)))) {
nodeList <- nodeList[-c(i),]
}
}
# Rebase id's
nodeList$newID <- data.frame(seq(1:nrow(nodeList)) - 1)
colnames(nodeList[, ncol(nodeList)]) <- "newID"
for (i in 1:nrow(nodeList)) {
for (j in 1:nrow(edgeList)) {
if (nodeList$id[i] == edgeList$source[j]) {
edgeList$source[j] <- nodeList$newID[i]
}
if (nodeList$id[i] == edgeList$target[j]) {
edgeList$target[j] <- nodeList$newID[i]
}
}
}
# Generate the network
NYinstitutions <- forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "group", Nodesize = "value100", opacity = 0.85, zoom = TRUE)
nodeList <- read.csv(file = "Institution Node List.csv", header = TRUE, sep = ",")
nodeList$value100 <- nodeList$value/1000000
colnames(nodeList) <- c("id", "name", "group", "value", "value100")
nodeList$group <- nodeList$group - 1
edgeList <- read.csv(file = "Institution Edge List.csv", header = TRUE, sep = ",")
colnames(edgeList) <- c("source", "target", "type", "id", "label", "weight")
edgeList$label <- edgeList$type <- edgeList$id <- NULL
nodeList$value100 <- nodeList$value/1000000
value100 <- nodeList$value/1000000
nodeList <- read.csv(file = "Institution Node List.csv", header = TRUE, sep = ",")
nodeList$value100 <- nodeList$Value/1000000
colnames(nodeList) <- c("id", "name", "group", "value", "value100")
nodeList$group <- nodeList$group - 1
edgeList <- read.csv(file = "Institution Edge List.csv", header = TRUE, sep = ",")
colnames(edgeList) <- c("source", "target", "type", "id", "label", "weight")
edgeList$label <- edgeList$type <- edgeList$id <- NULL
for (i in nrow(nodeList):1) {
if ((is.na(match(nodeList$id[i], edgeList$source))) & (is.na(match(nodeList$id[i], edgeList$target)))) {
nodeList <- nodeList[-c(i),]
}
}
nodeList$newID <- data.frame(seq(1:nrow(nodeList)) - 1)
colnames(nodeList[, ncol(nodeList)]) <- "newID"
for (i in 1:nrow(nodeList)) {
for (j in 1:nrow(edgeList)) {
if (nodeList$id[i] == edgeList$source[j]) {
edgeList$source[j] <- nodeList$newID[i]
}
if (nodeList$id[i] == edgeList$target[j]) {
edgeList$target[j] <- nodeList$newID[i]
}
}
}
NYinstitutions <- forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "group", Nodesize = "value100", opacity = 0.85, zoom = TRUE)
NYinstitutions
library(knitr)
(!require(knitr))
detach("package:networkD3", unload=TRUE)
if(!require(networkD3)) {
install.packages("networkD3")
} else {
library(networkD3)
}
detach("package:networkD3", unload=TRUE)
library("networkD3")
packages <- cbind("networkD3", "knitr")
View(packages)
packages <- c("networkD3", "knitr")
length(packages)
packages[i]
packages <- cbind("networkD3", "knitr")
packages[i]
packages[1]
packages <- c("networkD3", "knitr")
packages[1]
rm(list = ls())
packages <- cbind("networkD3", "knitr")
for (i in 1:length(packages)) {
if(!require(packages[i])) {
install.packages(packages[i])
} else {
library(packages[i])
}
}
packages[1]
packages[2]
detach("package:networkD3", unload=TRUE)
detach("package:knitr", unload=TRUE)
detach("package:htmlwidgets", unload=TRUE)
rm(list = ls())
packages <- cbind("networkD3", "knitr")
for (i in 1:length(packages)) {
if(!require(packages[i])) {
install.packages(packages[i])
} else {
library(packages[i])
}
}
!require(packages[i])
rm(list = ls())
packages <- cbind("networkD3", "knitr")
for (i in 1:length(packages)) {
if(!require(packages[i])) {
install.packages(packages[i])
library(packages[i])
} else {
library(packages[i])
}
}
library(networkD3)
setwd("~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families")
nodeList <- read.csv(file = "Florentine families.csv", header = TRUE, sep = ",")
View(nodeList)
nodeList$type <- 0
for (i in 1:nrow(nodeList)) {
if (nodeList$Faction == "Oligarch") {
nodeList$type <- 1
}
}
for (i in 1:nrow(nodeList)) {
if (nodeList$Faction[i] == "Oligarch") {
nodeList$type[i] <- 1
}
}
nodeList$type <- 0
for (i in 1:nrow(nodeList)) {
if (nodeList$Faction[i] == "Oligarch") {
nodeList$type[i] <- 1
}
}
colnames(nodeList) <- c("id", "name", "faction", "wealth", "brokerage", "lat", "long", "lat10", "long10", "type" )
nodeList <- read.csv(file = "Florentine families.csv", header = TRUE, sep = ",")
nodeList <- read.csv(file = "Florentine families.csv", header = TRUE, sep = ",")
nodeList$Lat <- nodeList$lat10 <- nodeList$Long <- nodeList$long10 <- NULL
nodeList$type <- 0
for (i in 1:nrow(nodeList)) {
if (nodeList$Faction[i] == "Oligarch") {
nodeList$type[i] <- 1
}
}
colnames(nodeList) <- c("id", "name", "faction", "wealth", "brokerage", "type" )
edgeList <- read.csv(file = "Marriage links.csv", header = TRUE, sep = ",")
View(edgeList)
colnames(edgeList) <- c("source", "taregt", "weight")
setwd("../Florentine families")
nodeList <- read.csv(file = "Florentine families.csv", header = TRUE, sep = ",")
nodeList$Lat <- nodeList$lat10 <- nodeList$Long <- nodeList$long10 <- NULL
nodeList$type <- 0
for (i in 1:nrow(nodeList)) {
if (nodeList$Faction[i] == "Oligarch") {
nodeList$type[i] <- 1
}
}
colnames(nodeList) <- c("id", "name", "faction", "wealth", "brokerage", "type")
edgeList <- read.csv(file = "Marriage links.csv", header = TRUE, sep = ",")
colnames(edgeList) <- c("source", "target", "weight")
nodeList$newID <- data.frame(seq(1:nrow(nodeList)) - 1)
colnames(nodeList[, ncol(nodeList)]) <- "newID"
for (i in 1:nrow(nodeList)) {
for (j in 1:nrow(edgeList)) {
if (nodeList$id[i] == edgeList$source[j]) {
edgeList$source[j] <- nodeList$newID[i]
}
if (nodeList$id[i] == edgeList$target[j]) {
edgeList$target[j] <- nodeList$newID[i]
}
}
}
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "group", Nodesize = "value100", opacity = 0.85, zoom = TRUE)
rm(list = ls())
setwd("~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families")
if(!require(networkD3)) {
install.packages("networkD3")
library(networkD3)
} else {
library(networkD3)
}
# Load up and clean up the Node List and Edge List for the network
nodeList <- read.csv(file = "Florentine families.csv", header = TRUE, sep = ",")
nodeList$Lat <- nodeList$lat10 <- nodeList$Long <- nodeList$long10 <- NULL
nodeList$type <- 0
for (i in 1:nrow(nodeList)) {
if (nodeList$Faction[i] == "Oligarch") {
nodeList$type[i] <- 1
}
}
colnames(nodeList) <- c("id", "name", "faction", "wealth", "brokerage", "group")
edgeList <- read.csv(file = "Marriage links.csv", header = TRUE, sep = ",")
colnames(edgeList) <- c("source", "target", "weight")
# Rebase node IDs for analysis
nodeList$newID <- data.frame(seq(1:nrow(nodeList)) - 1)
colnames(nodeList[, ncol(nodeList)]) <- "newID"
for (i in 1:nrow(nodeList)) {
for (j in 1:nrow(edgeList)) {
if (nodeList$id[i] == edgeList$source[j]) {
edgeList$source[j] <- nodeList$newID[i]
}
if (nodeList$id[i] == edgeList$target[j]) {
edgeList$target[j] <- nodeList$newID[i]
}
}
}
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "group", opacity = 0.85, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "group", colourScale = c("#1f77b4", "#aec7e8") opacity = 0.85, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "group", colourScale = JS("d3.scale.category10()"), opacity = 0.85, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "group", colourScale = JS("d3.scale.category10(3)"), opacity = 0.85, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "group", colourScale = JS("d3.scale.category20b()"), opacity = 0.85, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "group", colourScale = JS("d3.scale.category10()"), opacity = 0.85, zoom = TRUE)
nodeList <- read.csv(file = "Florentine families.csv", header = TRUE, sep = ",")
nodeList$Lat <- nodeList$lat10 <- nodeList$Long <- nodeList$long10 <- NULL
nodeList <- read.csv(file = "Florentine families.csv", header = TRUE, sep = ",")
nodeList$Lat <- nodeList$lat10 <- nodeList$Long <- nodeList$long10 <- NULL
nodeList$Gross.Wealth <- nodeList$Gross.Wealth/10000
# Set up the libraries and all that jazz
rm(list = ls())
setwd("~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families")
if(!require(networkD3)) {
install.packages("networkD3")
library(networkD3)
} else {
library(networkD3)
}
# Load up and clean up the Node List and Edge List for the network
nodeList <- read.csv(file = "Florentine families.csv", header = TRUE, sep = ",")
nodeList$Lat <- nodeList$lat10 <- nodeList$Long <- nodeList$long10 <- NULL
nodeList$Gross.Wealth <- nodeList$Gross.Wealth/10000
nodeList$type <- 0
for (i in 1:nrow(nodeList)) {
if (nodeList$Faction[i] == "Oligarch") {
nodeList$type[i] <- 1
}
}
colnames(nodeList) <- c("id", "name", "faction", "wealth", "brokerage", "group")
edgeList <- read.csv(file = "Marriage links.csv", header = TRUE, sep = ",")
colnames(edgeList) <- c("source", "target", "weight")
# Rebase node IDs for analysis
nodeList$newID <- data.frame(seq(1:nrow(nodeList)) - 1)
colnames(nodeList[, ncol(nodeList)]) <- "newID"
for (i in 1:nrow(nodeList)) {
for (j in 1:nrow(edgeList)) {
if (nodeList$id[i] == edgeList$source[j]) {
edgeList$source[j] <- nodeList$newID[i]
}
if (nodeList$id[i] == edgeList$target[j]) {
edgeList$target[j] <- nodeList$newID[i]
}
}
}
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "group", colourScale = JS("d3.scale.category10()"), Nodesize = "wealth" opacity = 0.85, zoom = TRUE)
nodeList <- read.csv(file = "Florentine families.csv", header = TRUE, sep = ",")
nodeList$Lat <- nodeList$lat10 <- nodeList$Long <- nodeList$long10 <- NULL
nodeList$Gross.Wealth <- nodeList$Gross.Wealth/10000
rm(list = ls())
nodeList <- read.csv(file = "Florentine families.csv", header = TRUE, sep = ",")
nodeList$Lat <- nodeList$lat10 <- nodeList$Long <- nodeList$long10 <- NULL
nodeList$Gross.Wealth <- nodeList$Gross.Wealth/10000
nodeList$type <- 0
for (i in 1:nrow(nodeList)) {
if (nodeList$Faction[i] == "Oligarch") {
nodeList$type[i] <- 1
}
}
colnames(nodeList) <- c("id", "name", "faction", "wealth", "brokerage", "group")
edgeList <- read.csv(file = "Marriage links.csv", header = TRUE, sep = ",")
colnames(edgeList) <- c("source", "target", "weight")
# Rebase node IDs for analysis
nodeList$newID <- data.frame(seq(1:nrow(nodeList)) - 1)
colnames(nodeList[, ncol(nodeList)]) <- "newID"
for (i in 1:nrow(nodeList)) {
for (j in 1:nrow(edgeList)) {
if (nodeList$id[i] == edgeList$source[j]) {
edgeList$source[j] <- nodeList$newID[i]
}
if (nodeList$id[i] == edgeList$target[j]) {
edgeList$target[j] <- nodeList$newID[i]
}
}
}
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "group", colourScale = JS("d3.scale.category10()"), Nodesize = "wealth", opacity = 0.85, zoom = TRUE)
library(igraph)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "group", colourScale = JS("d3.scale.category10()"),
fontSize = 12, legend = TRUE,
Nodesize = "wealth", opacity = 0.85, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 12, legend = TRUE,
Nodesize = "wealth", opacity = 0.85, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 12, legend = TRUE, fontFamily = "sans",
Nodesize = "wealth", opacity = 0.85, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 12, legend = TRUE, fontFamily = "sans",  linkDistance = 50,
Nodesize = "wealth", opacity = 0.85, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 12, legend = TRUE, fontFamily = "sans",  linkDistance = 100,
Nodesize = "wealth", opacity = 0.85, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 12, legend = TRUE, fontFamily = "sans",  linkDistance = 1000,
Nodesize = "wealth", opacity = 0.85, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 12, legend = TRUE, fontFamily = "sans",  linkDistance = 200,
Nodesize = "wealth", opacity = 0.85, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 12, legend = TRUE, fontFamily = "sans", opacityNoHover = TRUE,
linkDistance = 200, Nodesize = "wealth", opacity = 0.85, zoom = TRUE)
install.packages("sna")
?sna
library(sna)
?sna
rm(list = ls())
setwd("~/Dropbox/Projects/R Network Tutorials/Examples/New York Directors/institutions")
if(!require(networkD3)) {
install.packages("networkD3")
library(networkD3)
} else {
library(networkD3)
}
# Load up and clean up the Node List and Edge List for the network
nodeList <- read.csv(file = "Institution Node List.csv", header = TRUE, sep = ",")
nodeList$value100 <- nodeList$Value/1000000
colnames(nodeList) <- c("id", "name", "group", "value", "value100")
nodeList$group <- nodeList$group - 1
edgeList <- read.csv(file = "Institution Edge List.csv", header = TRUE, sep = ",")
colnames(edgeList) <- c("source", "target", "type", "id", "label", "weight")
edgeList$label <- edgeList$type <- edgeList$id <- NULL
# Remove all nodes (institutions) that have no interlock
for (i in nrow(nodeList):1) {
if ((is.na(match(nodeList$id[i], edgeList$source))) & (is.na(match(nodeList$id[i], edgeList$target)))) {
nodeList <- nodeList[-c(i),]
}
}
# Rebase node IDs for analysis
nodeList$newID <- data.frame(seq(1:nrow(nodeList)) - 1)
colnames(nodeList[, ncol(nodeList)]) <- "newID"
for (i in 1:nrow(nodeList)) {
for (j in 1:nrow(edgeList)) {
if (nodeList$id[i] == edgeList$source[j]) {
edgeList$source[j] <- nodeList$newID[i]
}
if (nodeList$id[i] == edgeList$target[j]) {
edgeList$target[j] <- nodeList$newID[i]
}
}
}
# Generate the network
NYinstitutions <- forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "group", Nodesize = "value100", colourScale = JS("d3.scale.category10()"),
fontSize = 12, legend = TRUE, fontFamily = "sans", opacityNoHover = TRUE,
linkDistance = 200, opacity = 0.85, zoom = TRUE)
NYinstitutions
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "group", Nodesize = "value100", colourScale = JS("d3.scale.category10()"),
fontSize = 12, fontFamily = "sans",
linkDistance = 200, opacity = 0.85, zoom = TRUE)
# Set up the libraries and all that jazz
rm(list = ls())
setwd("~/Dropbox/Projects/R Network Tutorials/Examples/Florentine families")
if(!require(networkD3)) {
install.packages("networkD3")
library(networkD3)
} else {
library(networkD3)
}
# Load up and clean up the `Node List` and `Edge List` for the network
nodeList <- read.csv(file = "Florentine families.csv", header = TRUE, sep = ",")
nodeList$Lat <- nodeList$lat10 <- nodeList$Long <- nodeList$long10 <- NULL
nodeList$Gross.Wealth <- nodeList$Gross.Wealth/10000
colnames(nodeList) <- c("id", "name", "faction", "wealth", "brokerage")
edgeList <- read.csv(file = "Marriage links.csv", header = TRUE, sep = ",")
colnames(edgeList) <- c("source", "target", "weight")
# Rebase node IDs for analysis
nodeList$newID <- data.frame(seq(1:nrow(nodeList)) - 1)
colnames(nodeList[, ncol(nodeList)]) <- "newID"
for (i in 1:nrow(nodeList)) {
for (j in 1:nrow(edgeList)) {
if (nodeList$id[i] == edgeList$source[j]) {
edgeList$source[j] <- nodeList$newID[i]
}
if (nodeList$id[i] == edgeList$target[j]) {
edgeList$target[j] <- nodeList$newID[i]
}
}
}
# Generate the Florentine marriage network
MarriageNetwork <- forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 12, legend = TRUE, fontFamily = "sans", opacityNoHover = TRUE,
linkDistance = 200, Nodesize = "wealth", opacity = 0.85, zoom = TRUE)
MarriageNetwork
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 16, legend = TRUE, fontFamily = "Helvetica", opacityNoHover = TRUE,
linkDistance = 200, Nodesize = "wealth", opacity = 0.85, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = TRUE, fontFamily = "Helvetica", opacityNoHover = TRUE,
linkDistance = 200, Nodesize = "wealth", opacity = 0.85, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = TRUE, fontFamily = "cmr10", opacityNoHover = TRUE,
linkDistance = 200, Nodesize = "wealth", opacity = 0.85, zoom = TRUE)
names(pdfFonts())
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = TRUE, fontFamily = "AvantGarde", opacityNoHover = TRUE,
linkDistance = 200, Nodesize = "wealth", opacity = 0.85, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = TRUE, fontFamily = "Japan1", opacityNoHover = TRUE,
linkDistance = 200, Nodesize = "wealth", opacity = 0.85, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = TRUE, fontFamily = "Times", opacityNoHover = TRUE,
linkDistance = 200, Nodesize = "wealth", opacity = 0.85, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = TRUE, fontFamily = "Helvetica", opacityNoHover = TRUE,
linkColour = "#666", linkDistance = 200, Nodesize = "wealth", opacity = 0.85, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = TRUE, fontFamily = "Helvetica", opacityNoHover = TRUE,
linkColour = "#666", linkDistance = 200, Nodesize = "wealth", opacity = 1, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = TRUE, fontFamily = "Helvetica", opacityNoHover = TRUE,
linkColour = "#666", linkDistance = 200, Nodesize = "wealth", opacity = 0.9, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = TRUE, fontFamily = "Helvetica", opacityNoHover = TRUE,
linkColour = "#666", linkDistance = 500, Nodesize = "wealth", opacity = 0.9, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = TRUE, fontFamily = "Helvetica", opacityNoHover = TRUE,
linkColour = "#666", linkDistance = 250, Nodesize = "wealth", opacity = 0.9, zoom = TRUE)
forceNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = FALSE, fontFamily = "Helvetica", opacityNoHover = TRUE,
linkColour = "#666", linkDistance = 250, Nodesize = "wealth", opacity = 0.9, zoom = TRUE)
simpleNetwork(Links = edgeList, Nodes = nodeList, Source = "source",
Target = "target", Value = "weight", NodeID = "name",
Group = "faction", colourScale = JS("d3.scale.category10()"),
fontSize = 14, legend = FALSE, fontFamily = "Helvetica", opacityNoHover = TRUE,
linkColour = "#666", linkDistance = 250, Nodesize = "wealth", opacity = 0.9, zoom = TRUE)
c(1,2, 2,3)
edges=c(1,2, 2,3, 3,1, 3,6, 2,8, 1,7)
edges
